xsrv *get_s(void);
#ifdef XLIB
void xserver_eventloop(void *xptr,char *guicfg,char *inst);
void xserver_event_recv(xsrv *x,long *addr,int *ctr);
void xserver_event_send(void *arg);
xsrv *init_x(void *xptr,char *guicfg,char *inst); 
void init_features(xsrv *x,int ctr);
void init_commands(xsrv *x);
void add_command(xsrv *x,char *text,void (*func)(void *,void *,void *),int *icmd);
void init_windowbox(xsrv *x);
void init_panelboxes(xsrv *x,xbox *wbox);
void init_buttonboxes(xsrv *x,xbox *box,int ibpan);
void close_subboxes(xsrv *x,xbox *box);
void close_x(xsrv *x);
xlyr *get_layer(xsrv *x,xbox *box,unsigned lyrhash,char *lyrname);
unsigned long get_palette_grey(xsrv *x,double shade);
unsigned long get_palette_rgb(xsrv *x,uint8_t red,uint8_t green,uint8_t blue);
unsigned int get_raster_rgb(xsrv *x,XImage *image,uint8_t red,uint8_t green,uint8_t blue);
void put_raster_rgb(xsrv *x,XImage *image,unsigned int val,uint8_t *red,uint8_t *green,uint8_t *blue);
char mouse_in_box(xsrv *x,xbox *box,int xmouse,int ymouse);
void handle_cmd_keystroke(void *arg1,void *arg2,void *arg3);
void handle_shutdown_seq(xsrv *x,int *running);
void handle_image_key(xsrv *x,xbox *box,xbox *hbox,char ch);
void handle_text_command(xsrv *x,xbox *box,xbox *hbox,char ch);
void draw_character(xsrv *x,xbox *box,double shade,char ch);
void draw_cursor(xsrv *x,xbox *box,double shade);
void reset_cursor(xsrv *x,xbox *box);
void draw_button_depress(xsrv *x,xbox *box);
void draw_button_release(xsrv *x,xbox *box);
void handle_button_context(xsrv *x,xbox *wbox,char ccontext);
xbox *handle_mouse_panel(xsrv *x,xbox *box,int xmouse,int ymouse,int bmouse,char ccontext);
void handle_cmd_mouse(void *arg1,void *arg2,void *arg3);
void handle_button_click(xsrv *x,xbox *bbox,xbox *hbox,char ccontext,int panel);
void handle_current_context(xsrv *x,xbox *box,char *ctxt,int *panel);
void handle_activate_panel(xsrv *x,xbox *box);
xbox *handle_current_panel(xsrv *x,xbox *box);
xbox *handle_find_panel(xsrv *x,xbox *box,char ch,int panel);
void handle_clean_cursors(xsrv *x,xbox *wbox);
void redraw_box(xsrv *x,xbox *box);
void handle_text_output(xsrv *x,xbox *box,unsigned long col,int ctr,int nchars,char *text,char inout);
void handle_raster_pixel(xsrv *x,xbox *box,int xmouse,int ymouse);
void handle_cmd_write(void *arg1,void *arg2,void *arg3);
void handle_cmd_draw(void *arg1,void *arg2,void *arg3);
void handle_cmd_layer(void *arg1,void *arg2,void *arg3);
void handle_cmd_screen(void *arg1,void *arg2,void *arg3);
void handle_dbufclean(xsrv *x,xbox *box);
void handle_layer2dbuf(xsrv *x,xbox *box,xlyr *lyr,char render);
void handle_layer2client(xsrv *x,xbox *box,unsigned lyrhash,Pixmap lyr_rgb,Pixmap lyr_alpha,Pixmap lyr_mask);
void draw_polycircle(xsrv *x,xbox *box,xlyr *lyr,int npts,int *xc,int *yc,int *rad,uint8_t *red,uint8_t *green,uint8_t *blue,uint8_t *alpha,char drawtype);
void draw_polysquare(xsrv *x,xbox *box,xlyr *lyr,int npts,int *xc,int *yc,int *side,uint8_t *red,uint8_t *green,uint8_t *blue,uint8_t *alpha,char drawtype);
void draw_polygon(xsrv *x,xbox *box,xlyr *lyr,int npts,int *xpt,int *ypt,int *size,uint8_t *red,uint8_t *green,uint8_t *blue,uint8_t *alpha,char drawtype);
void draw_polyline(xsrv *x,xbox *box,xlyr *lyr,int npts,int *xpt,int *ypt,int *size,uint8_t *red,uint8_t *green,uint8_t *blue,uint8_t *alpha,char drawtype);
void draw_raster(xsrv *x,xbox *box,xlyr *lyr,int nx,int ny,uint8_t *red,uint8_t *green,uint8_t *blue,uint8_t *alpha);
void draw_clear(xsrv *x,xbox *box,xlyr *lyr);
void init_layer(xsrv *x,xbox *box,unsigned lyrhash,char type);
int reorder_layer(xsrv *x,xbox *box,unsigned lyrhash);
void close_layer(xsrv *x,xbox *box,xlyr *lyr,unsigned name);
void init_canvas(xsrv *x,xbox *box,xlyr *lyr);
void close_canvas(xsrv *x,xbox *box,xlyr *lyr);
void init_text(xsrv *x,xbox *box);
void close_text(xsrv *x,xbox *box);
#endif
